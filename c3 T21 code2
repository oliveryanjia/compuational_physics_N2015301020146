import math
import matplotlib.pyplot as plt      
g=9.8 
dt=0.04
#adjust theta to keep it in range of [-pi,+pi]
def adjust(x):
    while x>math.pi:
        x=x-2*math.pi
    while x<-math.pi:
        x=x+2*math.pi
    return x
#2-order Runge-Kutta method
def EC(omega0,theta0,q,l,FD,omegaD,T):
    motion=[[]for i in range(3)]
    motion[0].append(omega0)
    motion[1].append(theta0)
    motion[2].append(0)
    while motion[2][-1]<=T:
        motion[0].append(motion[0][-1]+(-g*math.sin(motion[1][-1])/l-q*motion[0][-1]+FD*math.sin(omegaD*motion[2][-1]))*dt)
        motion[1].append(motion[1][-1]+motion[0][-1]*dt)
        motion[2].append(motion[2][-1]+dt)
    return motion#omega,theta,t

d2=EC(omega0,theta0,q,l,0.5,omegaD,500)
d3=EC(omega0,theta0,q,l,1.2,omegaD,500)
plt.subplot(1,2,1)#
plt.plot(map(adjust,d2[1]),d2[0],linestyle='-')
plt.title(r'Fig.2.1 $\omega$ versus $\theta$')
plt.text(0.5,0.6,r'$F_D=0.5$')
plt.xlabel(r'$\theta$(radius)')
plt.ylabel(r'$\omega$(radius/second)')
plt.subplot(1,2,2)#
plt.plot(map(adjust,d3[1]),d3[0],linestyle='-')
plt.title(r'Fig.2.2 $\omega$ versus $\theta$')
plt.text(2,1.4,r'$F_D=1.2$')
plt.xlabel(r'$\theta$(radius)')
plt.ylabel(r'$\omega$(radius/second)')
plt.show()
